name: Release

# This workflow uses Trusted Publishing for crates.io
# To set up:
# 1. Go to crates.io → Your crate → Settings → Trusted Publishing
# 2. Add configuration:
#    - Repository owner: canon-protocol
#    - Repository name: canon-cli
#    - Workflow filename: release.yml
#    - Environment: (leave empty or use "release" if you want environment protection)
# 3. Remove CARGO_REGISTRY_TOKEN from GitHub secrets (no longer needed!)

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Run tests before publishing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Run tests for all workspace members
        run: cargo test --workspace --verbose

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace -- -D warnings

  # Publish to crates.io
  publish-crates:
    name: Publish to Crates.io
    needs: test
    runs-on: ubuntu-latest
    # Optional: Use GitHub environment for additional protection
    # environment: release
    permissions:
      id-token: write  # Required for OIDC token exchange with crates.io
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Determine version tag
        id: version
        run: |
          # Use inputs.tag when workflow_dispatch, otherwise github.ref_name
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Only publish stable releases (no pre-release suffix)
          if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_stable=true" >> $GITHUB_OUTPUT
            echo "Publishing stable release: $TAG"
          else
            echo "is_stable=false" >> $GITHUB_OUTPUT
            echo "Pre-release detected, skipping crates.io publish: $TAG"
          fi
      
      - name: Authenticate with crates.io
        if: steps.version.outputs.is_stable == 'true'
        uses: rust-lang/crates-io-auth-action@v1
        id: auth
      
      - name: Publish canon-protocol to crates.io
        if: steps.version.outputs.is_stable == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "Publishing canon-protocol..."
          cargo publish -p canon-protocol --no-verify
          # Wait a bit for crates.io to index
          echo "Waiting for crates.io to index canon-protocol..."
          sleep 30
      
      - name: Publish canon-cli to crates.io
        if: steps.version.outputs.is_stable == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "Publishing canon-cli..."
          cargo publish -p canon-cli --no-verify

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Canon CLI ${{ steps.version.outputs.tag }}
          prerelease: ${{ steps.version.outputs.is_stable != 'true' }}
          generate_release_notes: true
          body: |
            ## Canon Protocol CLI Release
            
            ### Installation
            
            Install from crates.io:
            ```bash
            cargo install canon-cli
            ```
            
            Or add the library to your project:
            ```toml
            [dependencies]
            canon-protocol = "0.1"
            ```
            
            ### Verify Installation
            ```bash
            canon --version
            ```
            
            ### Quick Start
            ```bash
            # Initialize a new Canon repository
            canon init
            
            # Install dependencies
            canon install
            
            # Add a dependency
            canon add "api.io/openapi@2.0.0"
            ```
            
            See the [README](https://github.com/canon-protocol/canon-cli) for full documentation.