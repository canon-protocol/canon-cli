name: Alpha Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Alpha ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: canon-linux-x64
            
          - target: x86_64-apple-darwin
            os: macos-latest
            name: canon-macos-intel
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: canon-macos-apple
            
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: canon-windows.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-alpha
          
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        
      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/canon
        
      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/canon.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/canon ${{ matrix.name }}
          fi
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: alpha-${{ matrix.name }}
          path: ${{ matrix.name }}
          retention-days: 30

  create-alpha-release:
    name: Create Alpha Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts -name "canon-*" -type f -exec cp {} release-files/ \;
          ls -la release-files/
        
      - name: Generate alpha tag
        id: tag
        run: |
          TIMESTAMP=$(date +"%Y%m%d-%H%M")
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TAG="v0.1.0-alpha.${TIMESTAMP}.${SHORT_SHA}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated alpha tag: $TAG"
        
      - name: Delete existing alpha release
        continue-on-error: true
        run: |
          gh release delete alpha --yes || true
          git push origin :refs/tags/alpha || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Create Alpha Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: alpha
          name: "Canon CLI Alpha (Latest)"
          files: release-files/*
          prerelease: true
          body: |
            ## üöÄ Alpha Release - Latest Build from Main
            
            **‚ö†Ô∏è This is an unstable alpha build for testing purposes only.**
            
            - **Commit:** ${{ github.sha }}
            - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            - **Branch:** main
            
            ### Quick Install & Test:
            
            **Linux:**
            ```bash
            wget https://github.com/canon-protocol/canon-cli/releases/download/alpha/canon-linux-x64
            chmod +x canon-linux-x64
            ./canon-linux-x64 --version
            ./canon-linux-x64 init test-project
            ```
            
            **macOS:**
            ```bash
            wget https://github.com/canon-protocol/canon-cli/releases/download/alpha/canon-macos-apple
            chmod +x canon-macos-apple
            ./canon-macos-apple --version
            ```
            
            **Windows:**
            Download `canon-windows.exe` and run:
            ```cmd
            canon-windows.exe --version
            ```
            
            ### What's Working:
            - ‚úÖ `canon init` - Creates canon.yml and project structure
            - ‚úÖ `canon --help` - Shows help information
            - ‚ö†Ô∏è Other commands are stubs (validate, build, clean, config)
            
            Auto-generated from commit: ${{ github.sha }}