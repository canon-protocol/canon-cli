# git-cliff configuration for Canon CLI
# https://git-cliff.org/docs/configuration

[changelog]
# Template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# Template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{ commit.scope }}:** {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# Template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# Remove leading and trailing whitespace from templates
trim = true
# Postprocessors for the changelog
postprocessors = [
    # Remove gitmoji from commit messages
    { pattern = ':\w+:', replace = "" },
]

[git]
# Parse commits based on the conventional commits specification
conventional_commits = true
# Filter out commits that are not conventional
filter_unconventional = false
# Process each line of the commit body
split_commits = false
# Regex for preprocessing the commit messages
commit_preprocessors = [
    # Remove issue numbers from commits
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# Regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->⚡ Features" },
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^doc", group = "<!-- 2 -->📚 Documentation" },
    { message = "^perf", group = "<!-- 3 -->⚡ Performance" },
    { message = "^refactor", group = "<!-- 4 -->🚜 Refactor" },
    { message = "^style", group = "<!-- 5 -->🎨 Styling" },
    { message = "^test", group = "<!-- 6 -->🧪 Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(version\\):", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 8 -->🔐 Security" },
    { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
]
# Protect against breaking changes
protect_breaking_commits = false
# Filter commits by paths
filter_commits = false
# Sort commits chronologically
date_order = false
# Sort commits by oldest or newest
topo_order = false
# Limit commits displayed per release
limit_commits = 1000

[bump]
# Bump version based on conventional commits
# major: breaking changes
# minor: new features
# patch: bug fixes
# When multiple types are present, the highest priority wins
features_always_bump_minor = true
breaking_always_bump_major = true

[remote.github]
owner = "canon-protocol"
repo = "canon-cli"